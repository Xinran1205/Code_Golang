##这个文件是传统的makefile,你看到的目录中另一个makefile是通过cmake生成的
##这个文件想要使用,得把原先的makefile删掉,然后把这个名字改一下
##makefile不好跨平台，因为路径什么的都是linux，windows下就跑不了，所以引出cmake
##CMake可以生成不同平台下的Makefile

##cmake的使用是要编写CMakeLists.txt这个文件,然后当我们执行cmake .后,就会生成一堆文件,同时其中有makefile,这个时候我们再make
##然后有一个非常好的技巧,因为cmake会生成一堆文件,我们的办法就是创建一个新目录,比如叫build,进到build里面,然后cmake ..这样就很清爽了

##version1
##第一种makefile的写法
# hello:practice1.cpp add.cpp
# 	g++ -o hello practice1.cpp add.cpp

##version2
##第二种makefile的写法
##更专业，定义一些新变量
# CXX = g++
# TARGET = hello
# OBJECTS = practice1.o add.o

# $(TARGET):$(OBJECTS)
# 	$(CXX) -o $(TARGET) $(OBJECTS)

# practice1.o:practice1.cpp
# 	$(CXX) -c practice1.cpp

# add.o:add.cpp
# 	$(CXX) -c add.cpp

##version3
# CXX = g++
# TARGET = hello
# OBJECTS = practice1.o add.o

# ##显示所有的warning
# CXXFLAGS = -c -Wall

# $(TARGET):$(OBJECTS)
# 	$(CXX) -o $@ $^
# %.o:%.cpp
# 	$(CXX) $(CXXFLAGS) $< -o $@

# ##这一句是防止我们在当前目录下有一个clean文件，那我们执行make clean就会当成编译
# .PHONY:clean
# ##这里很神，就是当我们执行make clean的时候，就会执行下面的命令
# clean:
# 	rm -rf $(TARGET) $(OBJECTS)


##version4,最好的makefile
CXX = g++
TARGET = hello
SRC = $(wildcard *.cpp)
##下面这一句是将SRC中的.cpp替换成.o
OBJECTS = $(patsubst %.cpp,%.o,$(SRC))

CXXFLAGS = -c -Wall

$(TARGET):$(OBJECTS)
	$(CXX) -o $@ $^
%.o:%.cpp
	$(CXX) $(CXXFLAGS) $< -o $@

.PHONY:clean
clean:
	rm -rf $(TARGET) $(OBJECTS)